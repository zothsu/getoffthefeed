---
import "../styles/global.css";
import "@splidejs/splide/dist/css/splide.min.css";

import HeaderOne from '../components/HeaderOne.astro';
import Footer from '../components/Footer.astro';
import BackToTop from '../components/BackToTop.astro';

export interface LayoutProps {
  title: string;
  description?: string;
}

const { description = 'Description' } = Astro.props;
const { title = 'title' } = Astro.props;
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="shortcut icon" type="image/x-icon" href="/img/favicon.png" />
  </head>
  <body class="bg-dark-space font-sans text-white">
    <HeaderOne />
    <main id="main">
      <slot />
    </main>
    <Footer />
    <BackToTop />

    <script>
    declare global {
      interface Window {
        Alpine: typeof import('alpinejs');
      }
    }
    import Alpine from 'alpinejs';

    window.Alpine = Alpine;
    Alpine.start();

    // Smooth Scroll and Active Class Handling
    document.addEventListener('DOMContentLoaded', () => {
      const navLinks = document.querySelectorAll('a[data-type="smooth"]');
      const sections = document.querySelectorAll('section[id]');

      const removeActiveClasses = () => {
        navLinks.forEach((link) => link.classList.remove('active'));
      };

      const setActiveLink = (targetId: string) => {
        removeActiveClasses();
        const activeLink = Array.from(navLinks).find(
          (link) => link.getAttribute('href') === `#${targetId}`
        );
        if (activeLink) activeLink.classList.add('active');
      };

      const checkCurrentSection = () => {
        let current = '';
        sections.forEach((section) => {
          const sectionTop = (section as HTMLElement).offsetTop - 80;
          const sectionHeight = section.clientHeight;
          if (
            window.pageYOffset >= sectionTop &&
            window.pageYOffset < sectionTop + sectionHeight
          ) {
            current = section.getAttribute('id') || '';
          }
        });
        if (current) {
          setActiveLink(current);
        } else if (window.pageYOffset < ((sections[0] as HTMLElement)?.offsetTop || 0) - 80) {
          setActiveLink('home');
        }
      };

      window.addEventListener('scroll', checkCurrentSection);

      navLinks.forEach((anchor) => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const href = anchor.getAttribute('href');
          const targetId = href ? href.substring(1) : '';
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const yOffset = -70;
            if (targetElement) {
              const y = targetElement ? targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset : 0;
              window.scrollTo({ top: y, behavior: 'smooth' });
              setActiveLink(targetId);
            }
          }
        });
      });

      const initializeActiveLink = () => {
        const hash = window.location.hash.substring(1);
        if (hash && document.getElementById(hash)) {
          setActiveLink(hash);
          const targetElement = document.getElementById(hash);
          const yOffset = -70;
          const y = targetElement ? targetElement.getBoundingClientRect().top + window.pageYOffset + yOffset : 0;
          window.scrollTo({ top: y, behavior: 'instant' });
        } else {
          checkCurrentSection();
        }
      };

      initializeActiveLink();
      window.addEventListener('hashchange', initializeActiveLink);
    });
    </script>
  </body>
</html>
