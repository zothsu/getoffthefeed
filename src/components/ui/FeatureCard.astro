---
export interface FeatureCardProps {
  title: string;
  description: string;
  icon: string;
  iconColor: 'neon-cyan' | 'neon-purple';
}

// Function to map icon keys to SVG paths
const getIconPath = (iconKey: string): string[] => {
  const iconPaths: Record<string, string[]> = {
    innovation: ['M9 19l-7 2 2-7 14-14 5 5-14 14z'],
    'user-centric': [
      'M15 12a3 3 0 11-6 0 3 3 0 016 0z',
      'M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z',
    ],
    precision: ['M13 10V3L4 14h7v7l9-11h-7z'],
  };
  return iconPaths[iconKey] || [];
};

const { title, description, icon, iconColor } = Astro.props;
---

<div
  class="bg-dark-space/80 backdrop-blur-md rounded-lg p-6 text-center transition-all duration-300 hover:shadow-lg"
  class:list={[
    iconColor === 'neon-cyan'
      ? 'border border-neon-cyan/30 hover:border-neon-cyan hover:shadow-neon-cyan/20'
      : 'border border-neon-purple/30 hover:border-neon-purple hover:shadow-neon-purple/20',
  ]}
>
  <div
    class:list={[
      'rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-4',
      iconColor === 'neon-cyan' ? 'bg-neon-cyan/10' : 'bg-neon-purple/10',
    ]}
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class:list={[
        'h-6 w-6',
        iconColor === 'neon-cyan' ? 'text-neon-cyan' : 'text-neon-purple',
      ]}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      {getIconPath(icon).map((path) => (
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d={path}
        />
      ))}
    </svg>
  </div>
  <h4
    class:list={[
      'font-bold mb-2',
      iconColor === 'neon-cyan' ? 'text-neon-cyan' : 'text-neon-purple',
    ]}
  >
    {title}
  </h4>
  <p class="text-gray-300">{description}</p>
</div>